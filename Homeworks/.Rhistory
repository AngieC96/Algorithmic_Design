path_plots <- paste0("./Data/",folder,"/")
path_outputs <- paste0("./Data/",folder,"/")
library(Hmisc)
s <- c("benchmark_times_tree.txt", "benchmark_times_btree.txt", "benchmark_times_map.txt")
leng <- length(s)
nbin = 1
for (k in 1:leng) {
p <- as.matrix(read.table(paste0(path_outputs, s[k]), header = TRUE))
nStart <- p[1]
nIncr <- p[2]
nEnd <- p[3]
nSampl <- p[4]
if (k == 1) {
meanData <- matrix(0, nrow = leng, ncol = (nEnd - nStart)/nIncr+1)
sdData <- matrix(0, nrow = leng, ncol = (nEnd - nStart)/nIncr+1)
}
incr <- 4
nrange <- seq(from=nStart, to=nEnd, by=nIncr)
for (m in 1:((nEnd-nStart)/nIncr)+1) {
incr <- incr + 1
#  print(incr)
nCurrent <- p[incr]
#  print(nCurrent)
size <- nCurrent/nSampl
#  print(size)
v <- seq(0, 0, l = size)
for(j in 1:size) {
v[j] <- p[incr + j]
}
#  print(v)
meanData[k, m] <- mean(v)
#    sdData[k, m] <- sd(v)
# binning technique
lbin <- size/nbin
temp <- seq(0,0, l = nbin)
temp2 <- seq(0,0, l = nbin)
for(b in 1:nbin) {
temp[b] <- mean(v[(1+(b-1)*lbin):(b*lbin)])
temp2[b] <- sd(v[(1+(b-1)*lbin):(b*lbin)])
}
sdData[k, m] <- mean(temp2)/sqrt(nbin)
#    sdData[k, m] <- sd(temp)/sqrt(nbin)
incr <- incr + size
}
}
meanData <- meanData/nSampl
sdData <- sdData/nSampl
maxylim <- max(as.numeric(meanData)) + 20
png(width=14, height=8, units = "cm", res = 300, pointsize = 8, file=paste0(path_plots, "benchmark.png"))
par(mar=c(3,3,2,1), mgp=c(2, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
errbar(nrange, meanData[1, ], meanData[1,]+sdData[1,]/2, meanData[1,]-sdData[1,]/2, type="p", pch = 21, col = 3, bg = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
lines(nrange, meanData[1, ], col = 3)
errbar(nrange, meanData[2, ], meanData[2,]+sdData[2,]/2, meanData[2,]-sdData[2,]/2, add = TRUE, pch = 21, col = 4, bg = 4)
lines(nrange, meanData[2, ], col = 4)
errbar(nrange, meanData[3, ], meanData[3,]+sdData[3,]/2, meanData[3,]-sdData[3,]/2, add = TRUE, pch = 21, col = 2, bg = 2)
lines(nrange, meanData[3, ], col = 2)
title("Benchmark on `find()`", adj = 0.5, line = 0.5, cex.main = 1.2)
legend(x = nStart, y = 60, legend=c("APbst::bst", "Balanced APbst::bst", "std::map"), col = c(3, 4, 2), lty=1, cex=0.85)
dev.off()
setwd("/home/angela/Documenti/Advanced Programming/AP_BST/benchmark")
folder <- "Sissa-nSampl=50(v[i]+reshuffle)"
path_plots <- paste0("./Data/",folder,"/")
path_outputs <- paste0("./Data/",folder,"/")
library(Hmisc)
s <- c("benchmark_times_tree.txt", "benchmark_times_btree.txt", "benchmark_times_map.txt")
leng <- length(s)
nbin = 1
for (k in 1:leng) {
p <- as.matrix(read.table(paste0(path_outputs, s[k]), header = TRUE))
nStart <- p[1]
nIncr <- p[2]
nEnd <- p[3]
nSampl <- p[4]
if (k == 1) {
meanData <- matrix(0, nrow = leng, ncol = (nEnd - nStart)/nIncr+1)
sdData <- matrix(0, nrow = leng, ncol = (nEnd - nStart)/nIncr+1)
}
incr <- 4
nrange <- seq(from=nStart, to=nEnd, by=nIncr)
for (m in 1:((nEnd-nStart)/nIncr)+1) {
incr <- incr + 1
#  print(incr)
nCurrent <- p[incr]
#  print(nCurrent)
size <- nCurrent/nSampl
#  print(size)
v <- seq(0, 0, l = size)
for(j in 1:size) {
v[j] <- p[incr + j]
}
#  print(v)
meanData[k, m] <- mean(v)
#    sdData[k, m] <- sd(v)
# binning technique
lbin <- size/nbin
temp <- seq(0,0, l = nbin)
temp2 <- seq(0,0, l = nbin)
for(b in 1:nbin) {
temp[b] <- mean(v[(1+(b-1)*lbin):(b*lbin)])
temp2[b] <- sd(v[(1+(b-1)*lbin):(b*lbin)])
}
sdData[k, m] <- mean(temp2)/sqrt(nbin)
#    sdData[k, m] <- sd(temp)/sqrt(nbin)
incr <- incr + size
}
}
meanData <- meanData/nSampl
sdData <- sdData/nSampl
maxylim <- max(as.numeric(meanData)) + 20
png(width=14, height=8, units = "cm", res = 300, pointsize = 8, file=paste0(path_plots, "benchmark.png"))
par(mar=c(3,3,2,1), mgp=c(2, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
errbar(nrange, meanData[1, ], meanData[1,]+sdData[1,]/2, meanData[1,]-sdData[1,]/2, type="p", pch = 21, col = 3, bg = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
lines(nrange, meanData[1, ], col = 3)
errbar(nrange, meanData[2, ], meanData[2,]+sdData[2,]/2, meanData[2,]-sdData[2,]/2, add = TRUE, pch = 21, col = 4, bg = 4)
lines(nrange, meanData[2, ], col = 4)
errbar(nrange, meanData[3, ], meanData[3,]+sdData[3,]/2, meanData[3,]-sdData[3,]/2, add = TRUE, pch = 21, col = 2, bg = 2)
lines(nrange, meanData[3, ], col = 2)
title("Benchmark on `find()`", adj = 0.5, line = 0.5, cex.main = 1.2)
legend(x = nStart, y = 60, legend=c("APbst::bst", "Balanced APbst::bst", "std::map"), col = c(3, 4, 2), lty=1, cex=0.85)
dev.off()
(nEnd - nStart)/nIncr+1
nrange
for (k in 1:leng) {
p <- as.matrix(read.table(paste0(path_outputs, s[k]), header = TRUE))
nStart <- p[1]
nIncr <- p[2]
nEnd <- p[3]
nSampl <- p[4]
long <- (nEnd - nStart)/nIncr+1
if (k == 1) {
meanData <- matrix(0, nrow = leng, ncol = long)
sdData <- matrix(0, nrow = leng, ncol = long)
}
incr <- 4
nrange <- seq(from=nStart, to=nEnd, by=nIncr)
for (m in 1:long) {
incr <- incr + 1
#  print(incr)
nCurrent <- p[incr]
#  print(nCurrent)
size <- nCurrent/nSampl
#  print(size)
v <- seq(0, 0, l = size)
for(j in 1:size) {
v[j] <- p[incr + j]
}
#  print(v)
meanData[k, m] <- mean(v)
#    sdData[k, m] <- sd(v)
# binning technique
lbin <- size/nbin
temp <- seq(0,0, l = nbin)
temp2 <- seq(0,0, l = nbin)
for(b in 1:nbin) {
temp[b] <- mean(v[(1+(b-1)*lbin):(b*lbin)])
temp2[b] <- sd(v[(1+(b-1)*lbin):(b*lbin)])
}
sdData[k, m] <- mean(temp2)/sqrt(nbin)
#    sdData[k, m] <- sd(temp)/sqrt(nbin)
incr <- incr + size
}
}
meanData <- meanData/nSampl
sdData <- sdData/nSampl
maxylim <- max(as.numeric(meanData)) + 20
png(width=14, height=8, units = "cm", res = 300, pointsize = 8, file=paste0(path_plots, "benchmark.png"))
par(mar=c(3,3,2,1), mgp=c(2, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
errbar(nrange, meanData[1, ], meanData[1,]+sdData[1,]/2, meanData[1,]-sdData[1,]/2, type="p", pch = 21, col = 3, bg = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
lines(nrange, meanData[1, ], col = 3)
errbar(nrange, meanData[2, ], meanData[2,]+sdData[2,]/2, meanData[2,]-sdData[2,]/2, add = TRUE, pch = 21, col = 4, bg = 4)
lines(nrange, meanData[2, ], col = 4)
errbar(nrange, meanData[3, ], meanData[3,]+sdData[3,]/2, meanData[3,]-sdData[3,]/2, add = TRUE, pch = 21, col = 2, bg = 2)
lines(nrange, meanData[3, ], col = 2)
title("Benchmark on `find()`", adj = 0.5, line = 0.5, cex.main = 1.2)
legend(x = nStart, y = 60, legend=c("APbst::bst", "Balanced APbst::bst", "std::map"), col = c(3, 4, 2), lty=1, cex=0.85)
dev.off()
maxylim <- max(as.numeric(meanData)) + 20
png(width=14, height=8, units = "cm", res = 300, pointsize = 8, file=paste0(path_plots, "benchmark.png"))
par(mar=c(3,3,2,1), mgp=c(2, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
errbar(nrange, meanData[1, ], meanData[1,]+sdData[1,]/2, meanData[1,]-sdData[1,]/2, type="p", pch = 21, col = 3, bg = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
lines(nrange, meanData[1, ], col = 3)
errbar(nrange, meanData[2, ], meanData[2,]+sdData[2,]/2, meanData[2,]-sdData[2,]/2, add = TRUE, pch = 21, col = 4, bg = 4)
lines(nrange, meanData[2, ], col = 4)
errbar(nrange, meanData[3, ], meanData[3,]+sdData[3,]/2, meanData[3,]-sdData[3,]/2, add = TRUE, pch = 21, col = 2, bg = 2)
lines(nrange, meanData[3, ], col = 2)
title("Benchmark on `find()`", adj = 0.5, line = 0.5, cex.main = 1.2)
legend(x = nStart, y = 50, legend=c("APbst::bst", "Balanced APbst::bst", "std::map"), col = c(3, 4, 2), lty=1, cex=0.85)
dev.off()
setwd("/home/angela/Documenti/Advanced Programming/AP_BST/benchmark")
folder <- "Ubuntu-nSampl=50"
path_plots <- paste0("./Data/",folder,"/")
path_outputs <- paste0("./Data/",folder,"/")
library(Hmisc)
s <- c("benchmark_times_tree.txt", "benchmark_times_btree.txt", "benchmark_times_map.txt")
leng <- length(s)
nbin = 1
for (k in 1:leng) {
p <- as.matrix(read.table(paste0(path_outputs, s[k]), header = TRUE))
nStart <- p[1]
nIncr <- p[2]
nEnd <- p[3]
nSampl <- p[4]
long <- (nEnd - nStart)/nIncr+1
if (k == 1) {
meanData <- matrix(0, nrow = leng, ncol = long)
sdData <- matrix(0, nrow = leng, ncol = long)
}
incr <- 4
nrange <- seq(from=nStart, to=nEnd, by=nIncr)
for (m in 1:long) {
incr <- incr + 1
#  print(incr)
nCurrent <- p[incr]
#  print(nCurrent)
size <- nCurrent/nSampl
#  print(size)
v <- seq(0, 0, l = size)
for(j in 1:size) {
v[j] <- p[incr + j]
}
#  print(v)
meanData[k, m] <- mean(v)
#    sdData[k, m] <- sd(v)
# binning technique
lbin <- size/nbin
temp <- seq(0,0, l = nbin)
temp2 <- seq(0,0, l = nbin)
for(b in 1:nbin) {
temp[b] <- mean(v[(1+(b-1)*lbin):(b*lbin)])
temp2[b] <- sd(v[(1+(b-1)*lbin):(b*lbin)])
}
sdData[k, m] <- mean(temp2)/sqrt(nbin)
#    sdData[k, m] <- sd(temp)/sqrt(nbin)
incr <- incr + size
}
}
meanData <- meanData/nSampl
sdData <- sdData/nSampl
maxylim <- max(as.numeric(meanData)) + 20
png(width=14, height=8, units = "cm", res = 300, pointsize = 8, file=paste0(path_plots, "benchmark.png"))
par(mar=c(3,3,2,1), mgp=c(2, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
errbar(nrange, meanData[1, ], meanData[1,]+sdData[1,]/2, meanData[1,]-sdData[1,]/2, type="p", pch = 21, col = 3, bg = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
lines(nrange, meanData[1, ], col = 3)
errbar(nrange, meanData[2, ], meanData[2,]+sdData[2,]/2, meanData[2,]-sdData[2,]/2, add = TRUE, pch = 21, col = 4, bg = 4)
lines(nrange, meanData[2, ], col = 4)
errbar(nrange, meanData[3, ], meanData[3,]+sdData[3,]/2, meanData[3,]-sdData[3,]/2, add = TRUE, pch = 21, col = 2, bg = 2)
lines(nrange, meanData[3, ], col = 2)
title("Benchmark on `find()`", adj = 0.5, line = 0.5, cex.main = 1.2)
legend(x = nStart, y = 50, legend=c("APbst::bst", "Balanced APbst::bst", "std::map"), col = c(3, 4, 2), lty=1, cex=0.85)
dev.off()
## save the workspace
save.image(paste0(path_plots, folder, ".RData"))
maxylim <- max(as.numeric(meanData)) + 20
png(width=14, height=8, units = "cm", res = 300, pointsize = 8, file=paste0(path_plots, "benchmark.png"))
par(mar=c(3,3,2,1), mgp=c(2, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
errbar(nrange, meanData[1, ], meanData[1,]+sdData[1,]/2, meanData[1,]-sdData[1,]/2, type="p", pch = 21, col = 3, bg = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
lines(nrange, meanData[1, ], col = 3)
errbar(nrange, meanData[2, ], meanData[2,]+sdData[2,]/2, meanData[2,]-sdData[2,]/2, add = TRUE, pch = 21, col = 4, bg = 4)
lines(nrange, meanData[2, ], col = 4)
errbar(nrange, meanData[3, ], meanData[3,]+sdData[3,]/2, meanData[3,]-sdData[3,]/2, add = TRUE, pch = 21, col = 2, bg = 2)
lines(nrange, meanData[3, ], col = 2)
title("Benchmark on `find()`", adj = 0.5, line = 0.5, cex.main = 1.2)
legend(x = nStart, y = 70, legend=c("APbst::bst", "Balanced APbst::bst", "std::map"), col = c(3, 4, 2), lty=1, cex=0.85)
dev.off()
setwd("/home/angela/Documenti/Advanced Programming/AP_BST/benchmark")
folder <- "Ubuntu-nEnd = 10000"
path_plots <- paste0("./Data/",folder,"/")
path_outputs <- paste0("./Data/",folder,"/")
library(Hmisc)
s <- c("benchmark_times_tree.txt", "benchmark_times_btree.txt", "benchmark_times_map.txt")
leng <- length(s)
nbin = 1
for (k in 1:leng) {
p <- as.matrix(read.table(paste0(path_outputs, s[k]), header = TRUE))
nStart <- p[1]
nIncr <- p[2]
nEnd <- p[3]
nSampl <- p[4]
long <- (nEnd - nStart)/nIncr+1
if (k == 1) {
meanData <- matrix(0, nrow = leng, ncol = long)
sdData <- matrix(0, nrow = leng, ncol = long)
}
incr <- 4
nrange <- seq(from=nStart, to=nEnd, by=nIncr)
for (m in 1:long) {
incr <- incr + 1
#  print(incr)
nCurrent <- p[incr]
#  print(nCurrent)
size <- nCurrent/nSampl
#  print(size)
v <- seq(0, 0, l = size)
for(j in 1:size) {
v[j] <- p[incr + j]
}
#  print(v)
meanData[k, m] <- mean(v)
#    sdData[k, m] <- sd(v)
# binning technique
lbin <- size/nbin
temp <- seq(0,0, l = nbin)
temp2 <- seq(0,0, l = nbin)
for(b in 1:nbin) {
temp[b] <- mean(v[(1+(b-1)*lbin):(b*lbin)])
temp2[b] <- sd(v[(1+(b-1)*lbin):(b*lbin)])
}
sdData[k, m] <- mean(temp2)/sqrt(nbin)
#    sdData[k, m] <- sd(temp)/sqrt(nbin)
incr <- incr + size
}
}
meanData <- meanData/nSampl
sdData <- sdData/nSampl
maxylim <- max(as.numeric(meanData)) + 20
png(width=14, height=8, units = "cm", res = 300, pointsize = 8, file=paste0(path_plots, "benchmark.png"))
par(mar=c(3,3,2,1), mgp=c(2, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
errbar(nrange, meanData[1, ], meanData[1,]+sdData[1,]/2, meanData[1,]-sdData[1,]/2, type="p", pch = 21, col = 3, bg = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
lines(nrange, meanData[1, ], col = 3)
errbar(nrange, meanData[2, ], meanData[2,]+sdData[2,]/2, meanData[2,]-sdData[2,]/2, add = TRUE, pch = 21, col = 4, bg = 4)
lines(nrange, meanData[2, ], col = 4)
errbar(nrange, meanData[3, ], meanData[3,]+sdData[3,]/2, meanData[3,]-sdData[3,]/2, add = TRUE, pch = 21, col = 2, bg = 2)
lines(nrange, meanData[3, ], col = 2)
title("Benchmark on `find()`", adj = 0.5, line = 0.5, cex.main = 1.2)
legend(x = nStart, y = 50, legend=c("APbst::bst", "Balanced APbst::bst", "std::map"), col = c(3, 4, 2), lty=1, cex=0.85)
dev.off()
setwd("/home/angela/Documenti/Advanced Programming/AP_BST/benchmark")
folder <- "Ubuntu-nEnd=10000"
path_plots <- paste0("./Data/",folder,"/")
path_outputs <- paste0("./Data/",folder,"/")
library(Hmisc)
s <- c("benchmark_times_tree.txt", "benchmark_times_btree.txt", "benchmark_times_map.txt")
leng <- length(s)
nbin = 1
for (k in 1:leng) {
p <- as.matrix(read.table(paste0(path_outputs, s[k]), header = TRUE))
nStart <- p[1]
nIncr <- p[2]
nEnd <- p[3]
nSampl <- p[4]
long <- (nEnd - nStart)/nIncr+1
if (k == 1) {
meanData <- matrix(0, nrow = leng, ncol = long)
sdData <- matrix(0, nrow = leng, ncol = long)
}
incr <- 4
nrange <- seq(from=nStart, to=nEnd, by=nIncr)
for (m in 1:long) {
incr <- incr + 1
#  print(incr)
nCurrent <- p[incr]
#  print(nCurrent)
size <- nCurrent/nSampl
#  print(size)
v <- seq(0, 0, l = size)
for(j in 1:size) {
v[j] <- p[incr + j]
}
#  print(v)
meanData[k, m] <- mean(v)
#    sdData[k, m] <- sd(v)
# binning technique
lbin <- size/nbin
temp <- seq(0,0, l = nbin)
temp2 <- seq(0,0, l = nbin)
for(b in 1:nbin) {
temp[b] <- mean(v[(1+(b-1)*lbin):(b*lbin)])
temp2[b] <- sd(v[(1+(b-1)*lbin):(b*lbin)])
}
sdData[k, m] <- mean(temp2)/sqrt(nbin)
#    sdData[k, m] <- sd(temp)/sqrt(nbin)
incr <- incr + size
}
}
meanData <- meanData/nSampl
sdData <- sdData/nSampl
maxylim <- max(as.numeric(meanData)) + 20
png(width=14, height=8, units = "cm", res = 300, pointsize = 8, file=paste0(path_plots, "benchmark.png"))
par(mar=c(3,3,2,1), mgp=c(2, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
errbar(nrange, meanData[1, ], meanData[1,]+sdData[1,]/2, meanData[1,]-sdData[1,]/2, type="p", pch = 21, col = 3, bg = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
lines(nrange, meanData[1, ], col = 3)
errbar(nrange, meanData[2, ], meanData[2,]+sdData[2,]/2, meanData[2,]-sdData[2,]/2, add = TRUE, pch = 21, col = 4, bg = 4)
lines(nrange, meanData[2, ], col = 4)
errbar(nrange, meanData[3, ], meanData[3,]+sdData[3,]/2, meanData[3,]-sdData[3,]/2, add = TRUE, pch = 21, col = 2, bg = 2)
lines(nrange, meanData[3, ], col = 2)
title("Benchmark on `find()`", adj = 0.5, line = 0.5, cex.main = 1.2)
legend(x = nStart, y = 50, legend=c("APbst::bst", "Balanced APbst::bst", "std::map"), col = c(3, 4, 2), lty=1, cex=0.85)
dev.off()
## save the workspace
save.image(paste0(path_plots, folder, ".RData"))
maxylim <- max(as.numeric(meanData)) + 20
png(width=14, height=8, units = "cm", res = 300, pointsize = 8, file=paste0(path_plots, "benchmark_try.png"))
par(mar=c(3,3,2,1), mgp=c(2, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
#errbar(nrange, meanData[1, ], meanData[1,]+sdData[1,]/2, meanData[1,]-sdData[1,]/2, type="p", pch = 21, col = 3, bg = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
plot(nrange, meanData[1, ], type="l", col = 3, ylim = c(0, maxylim), xlab = "Number of Nodes in the tree", ylab = "Time [ns]", cex.axis=1, cex.lab=1)
#errbar(nrange, meanData[2, ], meanData[2,]+sdData[2,]/2, meanData[2,]-sdData[2,]/2, add = TRUE, pch = 21, col = 4, bg = 4)
lines(nrange, meanData[2, ], col = 4)
#errbar(nrange, meanData[3, ], meanData[3,]+sdData[3,]/2, meanData[3,]-sdData[3,]/2, add = TRUE, pch = 21, col = 2, bg = 2)
lines(nrange, meanData[3, ], col = 2)
title("Benchmark on `find()`", adj = 0.5, line = 0.5, cex.main = 1.2)
legend(x = nStart, y = 50, legend=c("APbst::bst", "Balanced APbst::bst", "std::map"), col = c(3, 4, 2), lty=1, cex=0.85)
dev.off()
## load the workspace
load("data.RData")
setwd("/home/angela/Documenti/Algorithmic Design/Algorithmic_Design/Homeworks")
## load the workspace
load("data.RData")
T <- as.matrix(read.csv("times_delete_min.csv", head = TRUE, sep = "\t"))
View(`T`)
T <- as.matrix(read.csv("times_delete_min.csv", sep = "\t"))
rm(n)
T <- as.matrix(read.csv("times_Strassen.csv", head = TRUE, sep = "\t"))
n1 <- seq(0, 0, l = dim(T)[1])
for(i in 1:dim(T)[1]) {
n1[i] <- T[i, 1]
naive[i] <- T[i, 2]
strassen[i] <- T[i, 3]
strassen_bst[i] <- T[i, 4]
}
T <- as.matrix(read.csv("times_delete_min_OLD.csv", head = TRUE, sep = "\t"))
n2 <- seq(0, 0, l = dim(T)[1])
for(i in 1:dim(T)[1]) {
n2[i] <- T[i, 1]
heap[i] <- T[i, 2]
array[i] <- T[i, 3]
}
size <- 20 # see the number of repetitions in the script script.sh!
T <- as.matrix(read.csv("times_delete_min.csv", sep = "\t"))
heap <- matrix(0, 0, nrow = length(n2), ncol = size)
array <- matrix(0, 0, nrow = length(n2), ncol = size)
for(i in 1:dim(T)[1]) {
heap[i] <- T[i, 2]
array[i] <- T[i, 3]
}
View(`T`)
View(`T`)
T <- as.matrix(read.csv("times_delete_min.csv", sep = "\t"))
View(`T`)
View(`T`)
T <- as.matrix(read.csv("times_delete_min.csv", header = FALSE, sep = "\t"))
View(`T`)
heap <- matrix(0, 0, nrow = length(n2), ncol = size)
array <- matrix(0, 0, nrow = length(n2), ncol = size)
for(i in 1:dim(T)[1]) {
heap[i] <- T[i, 2]
array[i] <- T[i, 3]
}
View(`T`)
View(`T`)
View(array)
size <- 20 # see the number of repetitions in the script script.sh!
T <- as.matrix(read.csv("times_delete_min.csv", header = FALSE, sep = "\t"))
heap <- matrix(0, 0, nrow = length(n2), ncol = size)
array <- matrix(0, 0, nrow = length(n2), ncol = size)
for(j in 1:size){
for(i in 1:dim(T)[1]) {
heap[i][j] <- T[i, 2]
array[i][j] <- T[i, 3]
}
}
View(array)
View(heap)
View(heap)
for(i in 1:dim(T)[1]) {
meanarray <- sum(array[i, ])
meanheap <- sum(heap[i, ])
}
for(i in 1:length(n2)) {
meanarray <- sum(array[i, ])
meanheap <- sum(heap[i, ])
}
meanarray
meanheap
meanheap <- seq(0, 0, l = length(n2))
meanarray <- matrix(0, 0, l = length(n2))
for(i in 1:length(n2)) {
meanarray[i] <- sum(array[i, ])
meanheap[i] <- sum(heap[i, ])
}
## save the workspace
save.image("./data.RData")
meanarray
View(array)
View(array)
i=1
array[i, ]
meanheap <- seq(0, 0, l = length(n2))
meanarray <- seq(0, 0, l = length(n2))
for(i in 1:length(n2)) {
meanarray[i] <- sum(array[i, ])
meanheap[i] <- sum(heap[i, ])
}
meanarray
meanarray[i] <- mean(array[i, ])
meanheap[i] <- mean(heap[i, ])
meanarray
for(i in 1:length(n2)) {
meanarray[i] <- mean(array[i, ])
meanheap[i] <- mean(heap[i, ])
}
meanarray
## save the workspace
save.image("./data.RData")
maxylim <- max(as.numeric(meanheap))
png(width=8, height=6, units = "cm", res = 300, pointsize = 10, file="onlyheap.png")
par(mar=c(3,2.5,1,1), mgp=c(1.5, 0.5, 0)) # mar=c(bottom, left, top, right), c(axis title, axis labels, axis line). default: mar=c(5, 4, 4, 2) + 0.1, mgp=c(3, 1, 0)
plot(n2, meanheap, pch = 21, col = 4, bg=4 , type="p", xaxt = "n", xlab = "Dimension", ylab = "Time [s]", cex.axis=.75, cex.lab=.75)
lines(n2, meanheap, col = 4)
title("Computational time", adj = 0.5, line = 0.5, cex.main=.75)
axis(1, at = n2, labels = n2, cex.axis = .75)
legend(x = 0, y = maxylim, legend="Heap", col = 4, lty=1, cex=.7)
dev.off()
